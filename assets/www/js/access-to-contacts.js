/****************************************************************************************************************/
/*** JAVASCRIPT TO MANAGE 'CONTACT DATA' WITH THE PUBLIC PERMANENT KEY AND THE EPHEMERAL KEYS OF EACH CONTACT ***/
/****************************************************************************************************************/

// variable to store the information of a contact (RSA Public Key [n,e] and Public Ephemeral Key generated by the contact).
var contactsList = [];

// variable to store ephemeral key pairs, where every contact can have stored several key pairs.
//  when a contact confirm a key pair generated by you, previous key pairs for that contact are deleted.
var ephemeralKeysContactsList = [];

// variable to access to the SQLite database
var myDB = null;

// Function to convert Unit8Array to bytes
function fromUnit8ArrayToBytes(array){
    var key = "";
    for (i=0;i<array.length;i++){
        key = key + String.fromCharCode(array[i]);
    }
    return key;
}

// Function to convert bytes to Unit8Array
function fromBytesToUnit8Array(bytes){
    var array = new Uint8Array(bytes.length);
    for (i=0;i<bytes.length;i++){
        array[i] = bytes[i].charCodeAt(0);
    }
    return array;
}

// Function to create tables to store contact information: RSA public Key, public ephemeral key created by contact, and the different ephemeral key pairs for every contact
function createTablesContact(callback){
    myDB = window.sqlitePlugin.openDatabase({name: "mySecureMessaging.db", location: 'default',androidDatabaseImplementation: 2});
    myDB.transaction(function(transaction) {
        transaction.executeSql('CREATE TABLE IF NOT EXISTS contactsData (phone text primary key, nRSA text, eRSA text, ephemeralPublicKey text)', [],
        function(tx, result) {
            console.log( "Table 'contactsData' open/created successfully." );

            myDB.transaction(function(transaction) {
                transaction.executeSql('CREATE TABLE IF NOT EXISTS contactsEphemeralKeys (id integer primary key, phone text, secretKey text, publicKey text)', [],
                function(tx, result) {
                    console.log( "Table 'contactsEphemeralKeys' open/created successfully." );
                    callback();
                },
                function(error) {
                    alert("Error occurred while creating the table: 'contactsEphemeralKeys'");
                });
            });
       },
       function(error) {
           alert("Error occurred while creating the table: 'contactsData'");
       });
   });
}

// Function to delete the tables to store the information about contacts
function deleteTablesContacts(callback){
    if (myDB==null) {
        myDB = window.sqlitePlugin.openDatabase({name: "mySecureMessaging.db", location: 'default'});
    }
    myDB.transaction(function(transaction) {
       transaction.executeSql('DROP TABLE contactsData', [],
       function(tx, result) {
           console.log( "Table 'contactsData' deleted successfully." );

           transaction.executeSql('DROP TABLE contactsEphemeralKeys', [],
           function(tx, result) {
               console.log( "Table 'contactsEphemeralKeys' deleted successfully." );
               callback();
           },
           function(error) {
               alert("Error occurred while deleting the table 'contactsEphemeralKeys'");
           });
       },
       function(error) {
           alert("Error occurred while deleting the table 'contactsData'.");
       });
    });
}

// Function to store contact data (RSA public key [n and e], and public ephmeral key generated by the contact) in the database
function writeContactDataBase(phone,n,e,ephemeralPublicKey,callback){
    myDB.transaction(function(transaction) {
        myDB.executeSql('INSERT INTO contactsData(phone, nRSA, eRSA, ephemeralPublicKey) VALUES (?,?,?,?)', [phone,n,e,ephemeralPublicKey], function (resultSet) {
          console.log('Contact '+phone+' was inserted in DataBase');
          callback();
        }, function(error) {
          console.log("Error in INSERT contact table 'contactsData': " + error.message);
        });
    });
}

// Function to store a contact ephemeral key pair (secret key and public key) in the database
function writeContactEphemeralKeysDataBase(phone, secretKey, publicKey, callback){
    myDB.transaction(function(transaction) {
        myDB.executeSql('INSERT INTO contactsEphemeralKeys(phone, secretKey, publicKey) VALUES (?,?,?)', [phone,secretKey,publicKey], function (resultSet) {
          console.log("Ephemeral Keys for contact "+phone+" was inserted in DataBase. Table 'contactsEphemeralKeys' ID Created: "+resultSet.insertId);
          callback(resultSet.insertId);
        }, function(error) {
          console.log("Error in INSERT contact table 'contactsEphemeralKeys': " + error.message);
        });
    });
}

// Function to store contact data (RSA public key [n and e], and public ephmeral key generated by the contact) in array 'contactList'
function writeContactMemory(phone,n,e,ephemeralPublicKey){
    var writingDone = 0;
    var i=0;
    var phoneFound = 0;
    if (contactsList.length>0){
        for (i=0;i<contactsList.length;i++){
            if (contactsList[i].phone == phone){
                phoneFound = 1;
            }
        }
    }
    if (phoneFound == 0){
        var contact = new Object();
        contact.phone = phone;
        contact.nRSA = n;
        contact.eRSA = e;
        contact.ephemeralPublicKey = ephemeralPublicKey;
        contactsList.push(contact);
        writingDone = 1;
    }
    return writingDone;
}

// Function to store a contact ephemeral key pair (secret key and public key) in the array 'ephemeralKeysContactsList'
function writeNewContactEphemeralKeysMemory(phone, secretKey, publicKey, id){
    var ephemeralKeysContact = new Object();
    ephemeralKeysContact.id = id;
    ephemeralKeysContact.phone = phone;
    ephemeralKeysContact.secretKey = secretKey;
    ephemeralKeysContact.publicKey = publicKey;
    ephemeralKeysContactsList.push(ephemeralKeysContact);
}

// Function to update the public ephemeral key sent by a contact
function writeNewPublicEphemeralKeyReceived(phone,ephemeralPublicKey,callback){
    for (i=0;i<contactsList.length;i++){
        if (contactsList[i].phone == phone){
            contactsList[i].ephemeralPublicKey = ephemeralPublicKey;

            myDB.transaction(function(transaction) {
                myDB.executeSql('UPDATE contactsData SET ephemeralPublicKey=? WHERE phone=?', [ephemeralPublicKey,phone], function (resultSet) {
                  console.log('Public Ephemeral Key contact '+phone+' was updated successfully');
                  callback();
                }, function(error) {
                  console.log("Error in updated contact table 'contactsData': " + error.message);
                });
            });
            break;
        }
    }
}

// Function to generate a ephemeral key pair curve 25519 (secret key and public key)
function generateKeyPairCurve25519(){
    var keysCurve25519 = nacl.box.keyPair();
    var objectKeysCurve25519 = new Object();

    var publicKey = fromUnit8ArrayToBytes(keysCurve25519.publicKey);
    objectKeysCurve25519.publicKey = btoa(publicKey);

    var secretKey = fromUnit8ArrayToBytes(keysCurve25519.secretKey);
    objectKeysCurve25519.secretKey = btoa(secretKey);

    return objectKeysCurve25519;
}

// Function to read contact data from database to the array 'contactsList' with the list of contact
function readContactsData(){
   if (contactsList.length == 0){
     myDB.executeSql("SELECT phone,nRSA,eRSA,ephemeralPublicKey FROM contactsData", [], function(resultSet) {
       var i=0;
       if (resultSet.rows.length > 0){
            for (i = 0; i < resultSet.rows.length; i++) {
                var contact = new Object();
                contact.phone = resultSet.rows.item(i).phone;
                contact.nRSA = resultSet.rows.item(i).nRSA;
                contact.eRSA = resultSet.rows.item(i).eRSA;
                contact.ephemeralPublicKey = resultSet.rows.item(i).ephemeralPublicKey;
                contactsList.push(contact);
            }
       }
     });
   }
}

// Function to read ephemeral key pairs generated from database to the array 'ephemeralKeysContactsList'
// with the list of ephemeral keys for every contact.
function readContactsEphemeralKeys(){
   if (ephemeralKeysContactsList.length == 0){
     myDB.executeSql("SELECT id,phone,secretKey,publicKey FROM contactsEphemeralKeys", [], function(resultSet) {
       var i=0;
       if (resultSet.rows.length > 0){
            for (i = 0; i < resultSet.rows.length; i++) {
                var ephemeralKeysContact = new Object();
                ephemeralKeysContact.id = resultSet.rows.item(i).id;
                ephemeralKeysContact.phone = resultSet.rows.item(i).phone;
                ephemeralKeysContact.secretKey = resultSet.rows.item(i).secretKey;
                ephemeralKeysContact.publicKey = resultSet.rows.item(i).publicKey;
                ephemeralKeysContactsList.push(ephemeralKeysContact);
            }
       }
     });
   }
}

// Function to obtain public ephemeral key of a contact. This key will be updated when the contact send a new one
function getPublicEphemeralKeyContact(phone){
    var publicKey = "";
    for(i=0;i<contactsList.length;i++){
        if (contactsList[i].phone == phone){
            publicKey = contactsList[i].ephemeralPublicKey;
            break;
        }
    }
    return publicKey;
}

// Function to obtain the object 'publicKey' with the public key of the contact from the values 'n' and 'e'.
function getPublicKeyRSAContact(phone){
    var publicKey = null;
    var n = "";
    var e = "";

    for(i=0;i<contactsList.length;i++){
        if (contactsList[i].phone == phone){
            n = contactsList[i].nRSA;
            e = contactsList[i].eRSA;

            var rsa = forge.pki.rsa;
            var BIn = new forge.jsbn.BigInteger(n.toString());
            var BIe = new forge.jsbn.BigInteger(e.toString());
            publicKey = rsa.setPublicKey(BIn, BIe);

            break;
        }
    }
    return publicKey;
}

// Function to read contact data (RSA public Key ['n' and 'e'] and ephemeral public key) and
// contact ephemeral key pairs (secret key and public key).
function readContacts(){
    readContactsData();
    readContactsEphemeralKeys();
}

// Function to delete the ephemeral key pairs (secret key and public key), which were generated before the 'publicKey'
function deletePreviousEphemeralKeys(phone,publicKey,callback){
    var found = 0;
    var id = -1;
    var i = ephemeralKeysContactsList.length-1;
    for (i=ephemeralKeysContactsList.length-1;i>=0;i--){
        if (found == 1 && ephemeralKeysContactsList[i].phone == phone) {
            ephemeralKeysContactsList.splice(i,1);
        }

        if (ephemeralKeysContactsList[i].publicKey == publicKey && ephemeralKeysContactsList[i].phone == phone) {
            found = 1;
            id = ephemeralKeysContactsList[i].id;
        }
    }

    myDB.transaction(function(transaction) {
        myDB.executeSql('DELETE FROM contactsEphemeralKeys WHERE id<? AND phone=?', [id,phone], function (resultSet) {
            console.log("Public Key Received: "+publicKey+ ". Removed old ephemeral keys form table 'contactsEphemeralKeys': " + phone);
            callback();
        }, function(error) {
            console.log("Error in DELETE contact table 'contactsEphemeralKeys': " + error.message);
        });
    });
}

// Function to delete a contact from database (tables 'contactData' y 'contactEphemeralKeys')
function deleteContactDataBase(phone,callback){
     myDB.transaction(function(transaction) {
         myDB.executeSql('DELETE FROM contactsEphemeralKeys WHERE phone=?', [phone], function (resultSet) {
           console.log("remove contacts table 'contactsEphemeralKeys': " + phone);

           myDB.transaction(function(transaction) {
               myDB.executeSql('DELETE FROM contactsData WHERE phone=?', [phone], function (resultSet) {
                 console.log("remove contact table 'contactsData': " + phone);
                 callback();
               }, function(error) {
                 console.log("Error in DELETE contact table 'contactsData': " + error.message);
               });
           });

         }, function(error) {
           console.log("Error in DELETE contact table 'contactsEphemeralKeys': " + error.message);
         });
     });
}

// Function to delete contact from arrays 'contactsList' and 'ephemeralKeysContactsList'
function deleteContactMemory(phone){
     // Delete RSA Keys and
     // Delete public Curve 25519 Contact Key
     var i=0;
     while ((contactsList[i].phone!=phone) && (i<contactsList.length)){
        i=i+1;
     }
     if (contactsList[i].phone==phone){
        var phone=contactsList[i].phone;
        contactsList.splice(i,1);
     }

     // Delete my Curve 25519 Keys for that contact
     for (i=0;i<ephemeralKeysContactsList.length;i++){
        if (ephemeralKeysContactsList[i].phone==phone){
            var phone=ephemeralKeysContactsList[i].phone;
            ephemeralKeysContactsList.splice(i,1);
        }
     }
 }

// Function to delete all contacts from database and from arrays 'contactsList' and 'ephemeralKeysContactsList'.
function deleteAllContacts(callback){
     myDB.transaction(function(transaction) {
         myDB.executeSql('DELETE FROM contactsEphemeralKeys', [], function (resultSet) {
           console.log("removed all ephemeral keys, table 'contactsEphemeralKeys'.");
           ephemeralKeysContactsList.splice(0,ephemeralKeysContactsList.length);

           myDB.transaction(function(transaction) {
                myDB.executeSql('DELETE FROM contactsData', [], function (resultSet) {
                  console.log("removed all contacts table 'contactsData'.");
                  contactsList.splice(0,contactsList.length);
                  callback();
                }, function(error) {
                  console.log("Error in DELETE all contacts, table 'contactsData': " + error.message);
                });
           });

         }, function(error) {
           console.log("Error in DELETE all contacts, table 'contactsEphemeralKeys': " + error.message);
         });
     });
}

// Function to obtain last ephemeral key pair generated for a specific contact
function getLastEphemeralKeysContact(phone){
     var i = ephemeralKeysContactsList.length - 1;
     var ephmeralKeys = new Object();
     ephmeralKeys.publicKey = "";
     ephmeralKeys.secretKey = "";

     while (i >= 0 && ephemeralKeysContactsList[i].phone != phone){
         i = i - 1;
     }
     if (i >= 0) {
         ephmeralKeys.publicKey = ephemeralKeysContactsList[i].publicKey;
         ephmeralKeys.secretKey = ephemeralKeysContactsList[i].secretKey;
     }

     return ephmeralKeys;
}

// Function to obtain the Ephemeral Secret Key for a specific contact from the Ephemeral Public Key
function getSecretKeyFromContact(phone, publicKey){
     i = 0;
     var secretKey = "";

     while ( i<ephemeralKeysContactsList.length && ephemeralKeysContactsList[i].publicKey != publicKey){
         i = i + 1;
     }

     if (i<ephemeralKeysContactsList.length && ephemeralKeysContactsList[i].phone == phone && ephemeralKeysContactsList[i].publicKey == publicKey){
         secretKey = ephemeralKeysContactsList[i].secretKey;
     }

     return secretKey;
}

// Function to know if a contact exist. If the phone exists in the array 'contactsList' returns true,
// but if it does not exist false is returned
function existPhone(phone){
    var exist;
    var publicKeyCurve25519 = getPublicEphemeralKeyContact(phone);

    if (publicKeyCurve25519.length == 44){
        exist = 1;
    } else {
        exist = 0;
    }

    return exist;
}

// Function to update a contact in database and in the array 'contactsList'.
// The values stored are 'n','e' (public permanent key) and ephemeral key sent by the contact.
function updateContact(phone,n,e,contactPublicEphemeralKey,callback){
    myDB.transaction(function(transaction) {
        myDB.executeSql('UPDATE contactsData SET nRSA=?,eRSA=?,ephemeralPublicKey=? WHERE phone=?', [n,e,phone,contactPublicEphemeralKey], function (resultSet) {
            for (i=0;i<contactsList.length;i++){
                if (contactsList[i].phone == phone){
                    contactsList[i].n = n;
                    contactsList[i].e = e;
                    contactsList[i].ephemeralPublicKey = contactPublicEphemeralKey;
                    console.log('Contact '+phone+' was updated successfully');
                    callback();
                    break;
                }
            }
        }, function(error) {
          console.log("Error in updated contact table 'contactsData': " + error.message);
        });
    });
}

// Function to update a contact in database and in the arrays 'contactsList' and 'ephemeralKeysContactsList'.
// In 'contactList' is updated the only entry for that value,
// but in 'ephemeralKeysContactsList' are updated last ephemeral keys generated for the specific contact.
function updateKeys(phone,n,e,myPublicEphemeralKey,mySecretEphemeralKey,contactPublicEphemeralKey,callback){
    alert(phone);
    for (i=0;i<contactsList.length;i++){
        if (contactsList[i].phone == phone){
            contactsList[i].nRSA = n;
            contactsList[i].eRSA = e;
            contactsList[i].ephemeralPublicKey = contactPublicEphemeralKey;

            myDB.transaction(function(transaction) {
                myDB.executeSql('UPDATE contactsData SET nRSA=?,eRSA=?,ephemeralPublicKey=? WHERE phone=?', [n,e,contactPublicEphemeralKey,phone], function (resultSet) {
                    console.log('Contact '+phone+' was updated successfully');

                    for (i=ephemeralKeysContactsList.length-1;i>=0;i--){
                        if (ephemeralKeysContactsList[i].phone == phone){
                            ephemeralKeysContactsList[i].publicKey = myPublicEphemeralKey;
                            ephemeralKeysContactsList[i].secretKey = mySecretEphemeralKey;

                            myDB.transaction(function(transaction) {
                                myDB.executeSql('UPDATE contactsEphemeralKeys SET publicKey=?, secretKey=? WHERE id in (SELECT id FROM contactsEphemeralKeys WHERE phone=? ORDER BY id desc LIMIT 1)', [myPublicEphemeralKey,mySecretEphemeralKey,phone], function (resultSet) {
                                  console.log('My Ephemeral Keys for the contact '+phone+' were updated successfully');
                                  callback();
                                }, function(error) {
                                  console.log("Error in updated contact table 'contactsEphemeralKeys': " + error.message);
                                });
                            });

                            break;
                        }
                    }
                }, function(error) {
                  console.log("Error in updated contact table 'contactsData': " + error.message);
                });
            });

            break;
        }
    }
}

// Function to obtain the array 'contactsList' with public RSA key contact (n,e) and the last ephemeral key sent by the contact
function getContacts(){
    return contactsList;
}

// Function to obtain the array 'ephemeralKeysContactsList' with ephemeral key pairs generated for every contact
function getEphemeralKeysContacts(){
    return ephemeralKeysContactsList;
}

// Function to write on the screen contacts information: RSA Public Key (n,e), Last ephemeral key generated (secret key, public key)
// and Last Ephemeral Public key sent by the contact.
function loadViewContacts(){
    var divRoot = document.getElementById("contacts");
    while (divRoot.firstChild) {
      divRoot.removeChild(divRoot.firstChild);
    }

    var i=0;
    for (i=0;i<contactsList.length;i++){
        var div = document.createElement("div");
        div.setAttribute("data-role", "collapsible");
        div.setAttribute("data-collapsed-icon", "user");
        var h3 = document.createElement("h3");
        h3.appendChild(document.createTextNode(contactsList[i].phone));

        var h4RSA = document.createElement("h4");
        h4RSA.appendChild(document.createTextNode("RSA Public Key: Permanent"));
        var divRSA = document.createElement("div");
        divRSA.setAttribute("data-role", "collapsible-set");
        var divPn = document.createElement("div");
        divPn.setAttribute("data-role", "collapsible");
        var h5Pn = document.createElement("h5");
        h5Pn.appendChild(document.createTextNode("n:"));
        var textareaPn = document.createElement("textarea");
        textareaPn.setAttribute("id", "Pn-"+contactsList[i].phone);
        textareaPn.setAttribute("cols", "40");
        textareaPn.setAttribute("rows", "8");
        textareaPn.setAttribute("name", "textarea");
        textareaPn.appendChild(document.createTextNode(contactsList[i].nRSA));
        var divPe = document.createElement("div");
        divPe.setAttribute("data-role", "collapsible");
        var h5Pe = document.createElement("h5");
        h5Pe.appendChild(document.createTextNode("e:"));
        var textareaPe = document.createElement("textarea");
        textareaPe.setAttribute("id", "Pe-"+contactsList[i].phone);
        textareaPe.setAttribute("cols", "40");
        textareaPe.setAttribute("rows", "1");
        textareaPe.setAttribute("name", "textarea");
        textareaPe.appendChild(document.createTextNode(contactsList[i].eRSA));

        var ephemeralKeysContact = getLastEphemeralKeysContact(contactsList[i].phone);

        var h4Curve = document.createElement("h4");
        h4Curve.appendChild(document.createTextNode("Curve 25519 Keys: Ephemeral"));
        var divCurve = document.createElement("div");
        divCurve.setAttribute("data-role", "collapsible-set");
        var divSKCurve = document.createElement("div");
        divSKCurve.setAttribute("data-role", "collapsible");
        var h5SKCurve = document.createElement("h5");
        h5SKCurve.appendChild(document.createTextNode("My Secret:"));
        var textareaSKCurve = document.createElement("textarea");
        textareaSKCurve.setAttribute("id", "mySecretEphemeralKey-"+contactsList[i].phone);
        textareaSKCurve.setAttribute("cols", "40");
        textareaSKCurve.setAttribute("rows", "8");
        textareaSKCurve.setAttribute("name", "textarea");
        textareaSKCurve.appendChild(document.createTextNode(ephemeralKeysContact.secretKey));
        var divPKCurve = document.createElement("div");
        divPKCurve.setAttribute("data-role", "collapsible");
        var h5PKCurve = document.createElement("h5");
        h5PKCurve.appendChild(document.createTextNode("My Public Key:"));
        var textareaPKCurve = document.createElement("textarea");
        textareaPKCurve.setAttribute("id", "myPublicEphemeralKey-"+contactsList[i].phone);
        textareaPKCurve.setAttribute("cols", "40");
        textareaPKCurve.setAttribute("rows", "8");
        textareaPKCurve.setAttribute("name", "textarea");
        textareaPKCurve.appendChild(document.createTextNode(ephemeralKeysContact.publicKey));
        var divCPKCurve = document.createElement("div");
        divCPKCurve.setAttribute("data-role", "collapsible");
        var h5CPKCurve = document.createElement("h5");
        h5CPKCurve.appendChild(document.createTextNode("Contact Public Key:"));
        var textareaCPKCurve = document.createElement("textarea");
        textareaCPKCurve.setAttribute("id", "contactPublicEphemeralKey-"+contactsList[i].phone);
        textareaCPKCurve.setAttribute("cols", "40");
        textareaCPKCurve.setAttribute("rows", "8");
        textareaCPKCurve.setAttribute("name", "textarea");
        textareaCPKCurve.appendChild(document.createTextNode(contactsList[i].ephemeralPublicKey));


        var divSon = document.createElement("div");
        var inputSave = document.createElement("input");
        var inputDelete = document.createElement("input");

        divSon.setAttribute("style", "text-align:center;");
        inputSave.setAttribute("type", "button");
        inputSave.setAttribute("onclick", "app.saveChangesContact("+contactsList[i].phone+")");
        inputSave.setAttribute("value", "Save Changes");
        inputSave.setAttribute("data-icon", "edit");
        inputSave.setAttribute("data-iconpos", "right");
        inputSave.setAttribute("data-inline", "true");
        inputDelete.setAttribute("type", "button");
        inputDelete.setAttribute("onclick", "app.deleteContact("+contactsList[i].phone+")");
        inputDelete.setAttribute("value", "Delete Contact");
        inputDelete.setAttribute("data-icon", "delete");
        inputDelete.setAttribute("data-iconpos", "right");
        inputDelete.setAttribute("data-inline", "true");
        divSon.appendChild(inputSave);
        divSon.appendChild(inputDelete);

        divPn.appendChild(h5Pn);
        divPn.appendChild(textareaPn);
        divPe.appendChild(h5Pe);
        divPe.appendChild(textareaPe);
        divRSA.appendChild(divPn);
        divRSA.appendChild(divPe);
        h4RSA.appendChild(divRSA);

        divSKCurve.appendChild(h5SKCurve);
        divSKCurve.appendChild(textareaSKCurve);
        divPKCurve.appendChild(h5PKCurve);
        divPKCurve.appendChild(textareaPKCurve);
        divCPKCurve.appendChild(h5CPKCurve);
        divCPKCurve.appendChild(textareaCPKCurve);
        divCurve.appendChild(divSKCurve);
        divCurve.appendChild(divPKCurve);
        divCurve.appendChild(divCPKCurve);
        h4Curve.appendChild(divCurve);

        div.appendChild(h3);
        div.appendChild(h4RSA);
        div.appendChild(h4Curve);
        div.appendChild(divSon);
        divRoot.appendChild(div);

    }

    $('#contacts').trigger('create');
}